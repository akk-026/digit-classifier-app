# -*- coding: utf-8 -*-
"""Copy of Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17963wYomjkTIyeRf6QLU8QkOUOO3T9Kf
"""

# Commented out IPython magic to ensure Python compatibility.
import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
# %matplotlib inline
import numpy as np

(x_train,y_train),(x_test,y_test) = keras.datasets.mnist.load_data()

len(x_train)

len(x_test)

x_train[0].shape

x_train[0]

plt.matshow(x_train[0])

y_train[:5]

x_train.shape

x_train=x_train/255
x_test=x_test/255

x_train_flattened=x_train.reshape(len(x_train),28*28)
x_train_flattened.shape

x_test_flattened=x_test.reshape(len(x_test),28*28)
x_test_flattened.shape

x_train_flattened[0]

model=keras.Sequential([keras.layers.Dense(10,input_shape=(784,),activation='sigmoid')])
model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])
model.fit(x_train_flattened,y_train,epochs=10)

model.evaluate(x_test_flattened,y_test)

plt.matshow(x_test[0])

y_predicted=model.predict(x_test_flattened)
y_predicted[0]

np.argmax(y_predicted[0])

y_predicted_labels=[np.argmax(i) for i in y_predicted]
y_predicted_labels[:5]

y_test[:5]

cm=tf.math.confusion_matrix(labels=y_test,predictions=y_predicted_labels)
cm

import seaborn as sn
plt.figure(figsize=(10,7))
sn.heatmap(cm,annot=True,fmt='d')
plt.xlabel('Predicted')
plt.ylabel('Truth')

model=keras.Sequential([keras.layers.Dense(100,input_shape=(784,),activation='relu'),keras.layers.Dense(10,activation='sigmoid')])
model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])
model.fit(x_train_flattened,y_train,epochs=10)

model.evaluate(x_test_flattened,y_test)

y_predicted=model.predict(x_test_flattened)
y_predicted_labels=[np.argmax(i) for i in y_predicted]
cm=tf.math.confusion_matrix(labels=y_test,predictions=y_predicted_labels)
cm
plt.figure(figsize=(10,7))
sn.heatmap(cm,annot=True,fmt='d')
plt.xlabel('Predicted')
plt.ylabel('Truth')
# Save the trained model to a file
model.save("mnist_model.h5")
